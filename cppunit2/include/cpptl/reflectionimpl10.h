// This script is generated by the python script reflectionimpl.py
// Do not edit.
#ifndef CPPTL_REFLECTIONIMPL10_H_INCLUDED
# define CPPTL_REFLECTIONIMPL10_H_INCLUDED

namespace CppTL { namespace Impl {

   template< class Object >
   class Invokable0 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)(  );

      Invokable0( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return >
   class Invokable0R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)(  );

      Invokable0R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object >
   class InvokableConst0 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)(  ) const;

      InvokableConst0( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return >
   class InvokableConst0R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)(  ) const;

      InvokableConst0R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1 >
   class Invokable1 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1 );

      Invokable1( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1 >
   class Invokable1R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1 );

      Invokable1R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1 >
   class InvokableConst1 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1 ) const;

      InvokableConst1( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1 >
   class InvokableConst1R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1 ) const;

      InvokableConst1R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2 >
   class Invokable2 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2 );

      Invokable2( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2 >
   class Invokable2R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2 );

      Invokable2R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2 >
   class InvokableConst2 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2 ) const;

      InvokableConst2( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2 >
   class InvokableConst2R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2 ) const;

      InvokableConst2R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3 >
   class Invokable3 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3 );

      Invokable3( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
   class Invokable3R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3 );

      Invokable3R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3 >
   class InvokableConst3 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3 ) const;

      InvokableConst3( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
   class InvokableConst3R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3 ) const;

      InvokableConst3R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
   class Invokable4 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4 );

      Invokable4( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
   class Invokable4R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4 );

      Invokable4R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
   class InvokableConst4 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4 ) const;

      InvokableConst4( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
   class InvokableConst4R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4 ) const;

      InvokableConst4R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class Invokable5 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 );

      Invokable5( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class Invokable5R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 );

      Invokable5R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class InvokableConst5 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const;

      InvokableConst5( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class InvokableConst5R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const;

      InvokableConst5R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class Invokable6 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 );

      Invokable6( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class Invokable6R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 );

      Invokable6R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class InvokableConst6 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const;

      InvokableConst6( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class InvokableConst6R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const;

      InvokableConst6R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class Invokable7 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 );

      Invokable7( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class Invokable7R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 );

      Invokable7R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class InvokableConst7 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const;

      InvokableConst7( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class InvokableConst7R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const;

      InvokableConst7R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class Invokable8 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 );

      Invokable8( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class Invokable8R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 );

      Invokable8R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class InvokableConst8 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const;

      InvokableConst8( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class InvokableConst8R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const;

      InvokableConst8R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class Invokable9 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 );

      Invokable9( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class Invokable9R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 );

      Invokable9R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class InvokableConst9 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const;

      InvokableConst9( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class InvokableConst9R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const;

      InvokableConst9R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class Invokable10 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 );

      Invokable10( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class Invokable10R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 );

      Invokable10R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class InvokableConst10 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const;

      InvokableConst10( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class InvokableConst10R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const;

      InvokableConst10R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   


template< class Arg>
void setReturnType( Invokable &invokable, Type<Arg> )
{
   invokable.returnType_ = typeId( Type<Arg>() );
}

template< class Arg1 >
void registerArgTypes( Invokable &invokable, Type<Arg1> )
{
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
}

template< class Arg1, class Arg2 >
void registerArgTypes( Invokable &invokable, Type<Arg1>, Type<Arg2> )
{
   registerArgTypes( invokable, Type<Arg1>() );
   registerArgTypes( invokable, Type<Arg2>() );

}

template< class Arg1, class Arg2, class Arg3 >
void registerArgTypes( Invokable &invokable, Type<Arg1>, Type<Arg2>, Type<Arg3> )
{
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   registerArgTypes( invokable, Type<Arg3>() );

}



template< class Object >
Invokable makeInvokable( void (Object::*member)(  ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable0< Object >( member ) ) );
   return invokable;
}

template< class Object, class Return >
Invokable makeInvokableR( Return (Object::*member)(  ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable0R< Object, Return >( member ) ) );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object >
Invokable makeInvokable( void (Object::*member)(  ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst0< Object >( member ) ) );
   return invokable;
}

template< class Object, class Return >
Invokable makeInvokableR( Return (Object::*member)(  ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst0R< Object, Return >( member ) ) );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1 >
Invokable makeInvokable( void (Object::*member)( Arg1 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable1< Object, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   return invokable;
}

template< class Object, class Return, class Arg1 >
Invokable makeInvokableR( Return (Object::*member)( Arg1 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable1R< Object, Return, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1 >
Invokable makeInvokable( void (Object::*member)( Arg1 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst1< Object, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   return invokable;
}

template< class Object, class Return, class Arg1 >
Invokable makeInvokableR( Return (Object::*member)( Arg1 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst1R< Object, Return, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable2< Object, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable2R< Object, Return, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst2< Object, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst2R< Object, Return, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable3< Object, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable3R< Object, Return, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst3< Object, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst3R< Object, Return, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable4< Object, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable4R< Object, Return, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst4< Object, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst4R< Object, Return, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable5< Object, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable5R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst5< Object, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst5R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable6< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable6R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst6< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst6R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable7< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable7R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst7< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst7R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable8< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable8R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst8< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst8R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable9< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable9R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst9< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst9R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable10< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable10R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst10< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst10R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}


} // namespace Impl
} // namespace CppTL

#endif // CPPTL_REFLECTIONIMPL10_H_INCLUDED
